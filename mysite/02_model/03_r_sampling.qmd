# Sampling in R

By **default** R offers less control over random sampling than python and commercial simulation software. It uses a single random number stream for all sampling and does not allow you to create individual random number streams (each with its own seed) for each sampling distribution.

> This is not ideal for DES, and has a range of impacts. The one you will likely experience is additional noise between experiments due to this lack of control. Another way to describe this is that changes in sampling distribution parameters and particularly arrival rates may cause experiments to go out of sync where the same patients experience different activity duration and routing due to random sampling differences across scenarios rather than the systematic differences you have introduced in your experiments.
>
> The result of this random noise is that typically you will need to run a lot more replications to carefully assess difference between experiments than if it were reduced/eliminated. It is also harder to debug experiments.

This notebook will:

1.  Demonstrate the shortcomings of a single random number stream and how noise is introduced between experiments.

2.  Illustrate that problem with a simple simmer model that varies arrival rates

3.  Introduce up to 25 random streams for sampling using the `SimEd` R package.

## Imports

```{r}
library(simmer)
library(simmer.bricks)
library(magrittr)
suppressMessages(library(simEd))
```

## A simple motivating example

To illustrate the impact of this design consider the example below. Imagine we are going to simulate 5 patients length of stay (LoS) in an acute hospital followed by rehabilitation. Acute LoS is exponentially distribution while rehabilitation LoS follows a uniform distribution (the choice of distribution does not matter).

> **IMPORTANT**: To make the results "repeatable" as possible we will set a random seed. With a single random stream we will see that this does not guarantee repeatable samples for patients **between** **experiments**.

### Constants

```{r}
SEED <- 42
ACUTE_MEAN <- 32.0
REHAB_MIN <- 15.0
REHAB_MAX <- 80.0
```

### Experiment 1

```{r}
n_patients <- 5

set.seed(SEED)
acute_los <- rexp(n=n_patients, rate=1.0/ACUTE_MEAN)
rehab_los <- runif(n=n_patients, min=REHAB_MIN, max=REHAB_MAX)

print(acute_los)
print(rehab_los)
```

### Experiment 2

We will now reset the random stream using the same seed and limit the number of patients simulated to 2.

When we re-run the code we might expect to get

> Acute Los:
>
> ```         
> 6.346778 21.148648
> ```
>
> Rehab Los:
>
> ```         
> 23.75333 57.70450
> ```

But we will see that this does not happen. This is because all sampling makes use of a pseudo random number stream that generates uniformly distribution numbers $U$'s between 0 and 1. When only 1 stream is used for all sampling we can end up with lots of noise between experiments simply because different $U$'s are used for the same patients.

```{r}
n_patients <- 2

set.seed(SEED)
acute_los <- rexp(n=n_patients, rate=1.0/ACUTE_MEAN)
rehab_los <- runif(n=n_patients, min=REHAB_MIN, max=REHAB_MAX)

print(acute_los)
print(rehab_los)
```

## Force the order of sampling

To force the order of sampling within a single random number stream each patient must do their sampling upfront and in process order.

Below we re-run Experiments 1 and 2, but this time we make sure the process is sampled in order (acute then rehab) for each patient.

### A Return to Experiment 1

```{r}
n_patients <- 3

set.seed(SEED)

for (patient_i in 1:n_patients) {
    print(paste("Patient ", patient_i))
    print(paste("Acute ", rexp(n=1, rate=1.0/ACUTE_MEAN)))
    print(paste("Rehab ", runif(n=1, min=REHAB_MIN, max=REHAB_MAX)))
}


```

### A Return to Experiment 2

```{r}
n_patients <- 2

set.seed(SEED)

for (patient_i in 1:n_patients) {
    print(paste("Patient ", patient_i))
    print(paste("Acute ", rexp(n=1, rate=1.0/ACUTE_MEAN)))
    print(paste("Rehab ", runif(n=1, min=REHAB_MIN, max=REHAB_MAX)))
}

```

## A `simmer` model

By default `simmer` **will be** affected by the single random stream for all sampling. This is because in a DES sampling will not occur in process order like we saw above. The numbers generated will vary depending on when events are scheduled to take place.

We will first consider this in experiments where we control the exact number of arrivals. In these experiments we will not use resources. This means that there is no impact on the model due to queuing if we increase or decrease the number of arrivals to the model.

> To simplify output we display the time patients **exit** acute and rehab activities.

### A return to Experiment 1 (again)

```{r}

# set the seed
set.seed(SEED)

# create simmer environment
env <- simmer("Experiment_1") 

# setup simple patient trajectory
patient <- trajectory("patient_pathway") %>% 
  timeout(function() rexp(1, rate=1.0/ACUTE_MEAN)) %>% 
  log_(function() {paste("Acute Los complete ", now(env))}) %>% 
  timeout(function() runif(n=1, min=REHAB_MIN, max=REHAB_MAX)) %>% log_(function() {paste("Rehab Los complete ", now(env))})

env %>% 
  # add 5 arrivals all at the same time.
  add_generator("patient", patient, at(0, 0, 0, 0, 0))
 

env %>%run() %>% 
  invisible
  
```

### A return to Experiment 2 (again)

Here we limit the model to simulated 3 patients that all arrive as the unit opens. Although arrival times are the same we can see that the acute length of stay and rehab length of stay quickly goes out of sync i.e. we have introduced noise between experiments that is nothing to do with the variation in the number of patients. Let's take patient 0 as an example.

In experiment 1:

-   Exits acute treatment at 6.3

-   Exits rehab treatment at 64.1

In experiment 2:

-   Exits acute treatment at 6.3

-   Exits rehab treatment at 55.1

```{r}
# reset the seed
set.seed(SEED)

# create simmer environment
env <- simmer("Experiment_2") 

# setup simple patient trajectory
patient <- trajectory("patient_pathway") %>% 
  timeout(function() rexp(1, rate=1.0/ACUTE_MEAN)) %>% 
  log_(function() {paste("Acute Los complete ", now(env))}) %>% 
  timeout(function() runif(n=1, min=REHAB_MIN, max=REHAB_MAX)) %>% 
  log_(function() {paste("Rehab Los complete ", now(env))})

env %>% 
  # now limit to 3 patients.
  add_generator("patient", patient, at(0, 0, 0))
 
env %>%run() %>% 
  invisible
```

## `simmer` and random arrivals

Finally we demonstrate that the effect is still observed across two arrivals that vary exponentially distributed inter-arrival times. We will run two new experiments. In the first IAT is 10 minutes. The second experiment increases the intensity of arrivals to an IAT of 9.0 minutes.

Follow patient 0 through the system. You should see that the time rehabilitation ends is different. As a single stream of random numbers was used, we were unable to control the order in which these were used to generate samples from the distributions.

### IAT \~ Exponential(10.0)

```{r}
# reset the seed
set.seed(SEED)

# create simmer environment
env <- simmer("Experiment_1") 

# setup simple patient trajectory
patient <- trajectory("patient_pathway") %>% 
  timeout(function() rexp(1, rate=1.0/ACUTE_MEAN)) %>% 
  log_(function() {paste("Acute Los complete ", now(env))}) %>% 
  timeout(function() runif(n=1, min=REHAB_MIN, max=REHAB_MAX)) %>% 
  log_(function() {paste("Rehab Los complete ", now(env))})

env %>% 
  # expontially distr arrivals mean IAT = 10.0
  add_generator("patient", patient, function() rexp(1, rate=1.0/10.0))
 
env %>%
  run(80) %>% 
  invisible
```

### IAT \~ Exponential(9.0)

```{r}
# reset the seed
set.seed(SEED)

# create simmer environment
env <- simmer("Experiment_4") 

# setup simple patient trajectory
patient <- trajectory("patient_pathway") %>% 
  timeout(function() rexp(1, rate=1.0/ACUTE_MEAN)) %>% 
  log_(function() {paste("Acute Los complete ", now(env))}) %>% 
  timeout(function() runif(n=1, min=REHAB_MIN, max=REHAB_MAX)) %>% log_(function() {paste("Rehab Los complete ", now(env))})

env %>% 
  # expontially distr arrivals mean IAT = 9.0
  add_generator("patient", patient, function() rexp(1, rate=1.0/9.0))
 
env %>%
  run(80) %>% 
  invisible
```

## Using the `simEd` package

`simEd` is an R package aimed at improving simulation education. It makes use of a package called `rstream` that provides multiple random number streams for DES. `simEd` provides up to 25 streams and re-implements a useful selection of statistical distributions that can be used.

Details of the package can be found here: https://www.rdocumentation.org/packages/simEd/versions/2.0.1

> B. Lawson and L. M. Leemis, "An R package for simulation education," 2017 Winter Simulation Conference (WSC), Las Vegas, NV, USA, 2017, pp. 4175-4186, doi: 10.1109/WSC.2017.8248124 https://ieeexplore.ieee.org/document/8248124

### Revisiting our initial experiment

The code below re-implements the original experiments we conducted using `simEd` equivalent sampling functions. The main difference is that we prefix functions with `v` instead of `r`. For example `rexp` becomes `vexp`. We also introduce a third parameter called stream (settable 1:25).

This time when we reduce the number of patients from 5 to 2 the acute and rehab samples remain the same for the first two patients.

```{r}
n_patients <- 5

set.seed(SEED)
# replace rexp with vexp and set stream number to 1
acute_los <- vexp(n=n_patients, rate=1.0/ACUTE_MEAN, stream=1)

# replace runif with vunif and set stream number to 2
rehab_los <- vunif(n=n_patients, min=REHAB_MIN, max=REHAB_MAX, stream=2)

print(acute_los)
print(rehab_los)
```

```{r}
n_patients <- 2

set.seed(SEED)
# replace rexp with vexp and set stream number to 1
acute_los <- vexp(n=n_patients, rate=1.0/ACUTE_MEAN, stream=1)

# replace runif with vunif and set stream number to 2
rehab_los <- vunif(n=n_patients, min=REHAB_MIN, max=REHAB_MAX, stream=2)

print(acute_los)
print(rehab_los)
```

An updated simmer model

```{r}
# reset the seed
set.seed(SEED)

# create simmer environment
env <- simmer("Experiment_1_simEd") 

# setup simple patient trajectory
patient <- trajectory("patient_pathway") %>% 
  timeout(function() vexp(1, rate=1.0/ACUTE_MEAN, stream=1)) %>% 
  log_(function() {paste("Acute Los complete ", now(env))}) %>% 
  timeout(function() vunif(n=1, min=REHAB_MIN, max=REHAB_MAX, stream=2)) %>% 
  log_(function() {paste("Rehab Los complete ", now(env))})

env %>% 
  # exponentially distr arrivals mean IAT = 10.0
  add_generator("patient", patient, function() vexp(1, rate=1.0/10.0, stream=3))
 
env %>%
  run(80) %>% 
  invisible
```

```{r}
# reset the seed
set.seed(SEED)

# create simmer environment
env <- simmer("Experiment_2_simEd") 

env %>% 
  # exponentially distr arrivals mean IAT = 9.0
  add_generator("patient", patient, function() vexp(1, rate=1.0/9.0, stream=3)) %>% 
  invisible
 
env %>%
  run(80) %>% 
  invisible
```
