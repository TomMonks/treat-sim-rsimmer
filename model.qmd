---
title: "Treatment Sim: an R `simmer` implementation"
author: "Thomas Monks, Alison Harper"
format: html
editor: visual
---

## Imports

```{r}
library(simmer)
suppressMessages(library(Rlab))
```

## Default values and constants

```{r}
# sign-in/triage parameters
DEFAULT_TRIAGE_MEAN = 3.0

# registration parameters
DEFAULT_REG_MEAN = 5.0
DEFAULT_REG_VAR= 2.0

# examination parameters
DEFAULT_EXAM_MEAN = 16.0
DEFAULT_EXAM_VAR = 3.0

# trauma/stabilisation
DEFAULT_TRAUMA_MEAN = 90.0

# Trauma treatment
DEFAULT_TRAUMA_TREAT_MEAN = 30.0
DEFAULT_TRAUMA_TREAT_VAR = 4.0

# Non trauma treatment
DEFAULT_NON_TRAUMA_TREAT_MEAN = 13.3
DEFAULT_NON_TRAUMA_TREAT_VAR = 2.0

# prob patient requires treatment given trauma
DEFAULT_NON_TRAUMA_TREAT_P = 0.60

# proportion of patients triaged as trauma
DEFAULT_PROB_TRAUMA = 0.12
```

## Resource Counts

Integer count variables representing the number of resources at each activity in the process

```{r}
DEFAULT_N_TRIAGE = 1
DEFAULT_N_REG = 1
DEFAULT_N_EXAM = 3
DEFAULT_N_TRAUMA = 2

# Non-trauma cubicles
DEFAULT_NON_TRAUMA_CUBICLES = 1

# trauma pathway cubicles
DEFAULT_TRAUMA_CUBICLES = 1
```

## Simulation model run settings

```{r}
# Random seed - this will be investigated for CRN
SEED = 42

# default results collection period
DEFAULT_RESULTS_COLLECTION_PERIOD = 60 * 19

# number of replications.
DEFAULT_N_REPS = 5

# Show the a trace of simulated events
# NOY in use at this stage.
TRACE = TRUE
```

## Functions

```{r}
#' Sample a patient type
#' 
#' @description
#' `sample_arrival_type` samples if a patient type is trauma or non-trauma
#' with a given probability.
#'
#' @details
#' The function uses the Bernouli distribution (Rlab) to sample
#' if a patient is Trauma or Non-Trauma.  The return values are 
#' 1 = Trauma, 2 = Non-trauma.
sample_arrival_type <- function(){
  ifelse(rbern(1, prob = DEFAULT_PROB_TRAUMA) == 1, 1, 2)
}
```

## Patient Trajectories

\`simmer\` uses the concept of a *trajectory* to model a process for a particular patient type. In the urgent care centre example trajectories allow us to model separate trauma and non-trauma processes. Note that different trajectories can share resources.

## Trauma Patients

```{r}
trauma_pathway <- trajectory(name="trauma_pathway") %>%
  log_(function() {paste("**Trauma arrival")}) %>% 
  
  # request triage bay
  set_attribute("start_triage_wait", function() {now(env)}) %>%
  seize(resource = "triage_bay", amount = 1) %>%
  timeout(task = rexp(1, 3.0)) %>%
  release(resource = "triage_bay", amount = 1) %>%
  
  log_(function() {paste("Triage wait time:",
                   now(env) - get_attribute(env, "start_triage_wait"))}) %>%
  
  # request trauma room for stabilization
  seize(resource = "trauma_room", amount = 1) %>%
  timeout(task = rexp(1, 90.0)) %>%
  release(resource = "trauma_room", amount = 1) %>%
  
  # request treatment cubicle
  seize(resource = "trauma_treat_cubicle", amount = 1) %>%
  timeout(task = rlnorm(1, meanlog=30.0, sdlog=sqrt(4.0))) %>%
  release(resource = "trauma_treat_cubicle", amount = 1)
```

##  Non-trauma patients

```{r}
non_trauma_pathway <- trajectory(name="non_trauma_pathway") %>%
  log_(function() {paste("**Non-Trauma arrival")}) %>% 
  # store start of waiting time.
  set_attribute("start_triage_wait", function() {now(env)}) %>%
  
  # queue and use triage bay
  seize(resource = "triage_bay", amount = 1) %>%
  
  log_(function() {paste("Triage wait time:",
                         now(env) - get_attribute(env, "start_triage_wait"))}) %>%
  
  timeout(task = rexp(1, 3.0)) %>%
  release(resource = "triage_bay", amount = 1) %>%
  
  # queue and use registration clerk
  set_attribute("start_reg_wait", function() {now(env)}) %>%
  seize(resource = "registration_clerk", amount = 1) %>%
  log_(function() {paste("Reg wait time:",
                         now(env) - get_attribute(env, "start_reg_wait"))}) %>%
  
  timeout(task = rlnorm(1, meanlog=5.0, sdlog=sqrt(4.0))) %>%
  release(resource = "registration_clerk", amount = 1) %>%
  
  # queue and use examination room
  set_attribute("start_exam_wait", function() {now(env)}) %>%
  seize(resource = "examination_room", amount = 1) %>%
  log_(function() {paste("Reg wait time:",
                         now(env) - get_attribute(env, "start_exam_wait"))}) %>%
  timeout(task = rnorm(1, 16.0, sqrt(4.0))) %>%
  release(resource = "examination_room", amount = 1)
```

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
