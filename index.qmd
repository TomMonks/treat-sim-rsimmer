---
title: "Treatment Sim: an R `simmer` implementation"
author: "Thomas Monks, Alison Harper"
format: html
editor: visual
---

## 1. Imports

```{r}
library(simmer)
library(tibble)
library(ggplot2)
suppressMessages(library(RCurl))
suppressMessages(library(Rlab))

```

## 2. Default values and constants

### 2.1 Distribution parameters

```{r}
# sign-in/triage parameters
DEFAULT_TRIAGE_MEAN = 3.0

# registration parameters
DEFAULT_REG_MEAN = 5.0
DEFAULT_REG_VAR= 2.0

# examination parameters
DEFAULT_EXAM_MEAN = 16.0
DEFAULT_EXAM_VAR = 3.0

# trauma/stabilisation
DEFAULT_TRAUMA_MEAN = 90.0

# Trauma treatment
DEFAULT_TRAUMA_TREAT_MEAN = 30.0
DEFAULT_TRAUMA_TREAT_VAR = 4.0

# Non trauma treatment
DEFAULT_NON_TRAUMA_TREAT_MEAN = 13.3
DEFAULT_NON_TRAUMA_TREAT_VAR = 2.0

# prob patient requires treatment given trauma
DEFAULT_NON_TRAUMA_TREAT_P = 0.60

# proportion of patients triaged as trauma
DEFAULT_PROB_TRAUMA = 0.12
```

### 2.2 Time dependent arrival rate data

The data for arrival rates varies between clinic opening at 6am and closure at 12am.

```{r}
# data are held in the Github repo and loaded from there.
NSPP_PATH = 'https://raw.githubusercontent.com/TomMonks/open-science-for-sim/main/src/notebooks/01_foss_sim/data/ed_arrivals.csv'

csv_data <- getURL(NSPP_PATH)
df <- read.csv(text=csv_data)

# lock in order of time of day for bar chart display
df$period <- factor(df$period, levels = df$period)

ggplot(data=df, aes(x=period, y=arrival_rate)) +
  geom_bar(stat="identity", fill="steelblue") + 
  theme(axis.text.x = element_text(angle = 90, 
                                   vjust = 0.5, 
                                   hjust=1)) +
  xlab("Hour of day") + 
  ylab("Mean arrivals (patients/hr)")

```

### 2.3 Resource Counts

Integer count variables representing the number of resources at each activity in the process

```{r}
DEFAULT_N_TRIAGE = 1
DEFAULT_N_REG = 1
DEFAULT_N_EXAM = 3
DEFAULT_N_TRAUMA = 2

# Non-trauma cubicles
DEFAULT_NON_TRAUMA_CUBICLES = 1

# trauma pathway cubicles
DEFAULT_TRAUMA_CUBICLES = 1
```

### 2.4 Simulation model run settings

```{r}
# Random seed - this will be investigated for CRN
SEED = 42

# default results collection period
DEFAULT_RESULTS_COLLECTION_PERIOD = 60 * 19

# number of replications.
DEFAULT_N_REPS = 5

# Show the a trace of simulated events
# NOY in use at this stage.
TRACE = TRUE
```

## 3. Functions

```{r}
#' Sample a patient type
#' 
#' @description
#' `sample_arrival_type` samples if a patient type is trauma or non-trauma
#' with a given probability.
#'
#' @details
#' The function uses the Bernouli distribution (Rlab) to sample
#' if a patient is Trauma or Non-Trauma.  The return values are 
#' 1 = Trauma, 2 = Non-trauma.
sample_arrival_type <- function(){
  ifelse(rbern(1, prob = DEFAULT_PROB_TRAUMA) == 1, 1, 2)
}
```

```{r}
#' Sample a if a non-trauma patient requires treatment
#' 
#' @description
#' `sample_nt_trauma_treatment` samples if a non-trauma patient
#' requires cubicle treatment
#'
#' @details
#' The function uses the Bernouli distribution (Rlab) to sample
#' if a patient is requires treatment or not.  The return values are 
#' 1 = Treatment, 0 = No treatment
sample_nt_trauma_treatment <- function(){
  ifelse(rbern(1, prob = DEFAULT_NON_TRAUMA_TREAT_P) == 1, 1, 0)
}
```

## 4. Patient Trajectories

The DES package `simmer` uses the concept of a `trajectory` to model a process for a particular patient type. In the urgent care centre example trajectories allow us to model separate trauma and non-trauma processes. Note that different trajectories can share common resources.

The `simmer` terminology for using resources and engaging in activities is easy to read:

-   `seize` - queue and take a resource when it is available.

-   `timeout` - a process delay (e.g. treatment or diagnostics)

-   `release` - release a resource.

`simmer` also provides a way to set an attribute of the `trajectory` using `set_attribute`. This is useful for storing timing information such as when a patient begins waiting for a resource (access via `now(env)`).

> The function `log_` is used in combination with `paste` to provide a dynamic simulation trace to the R console.

## Trauma Patients

```{r}
trauma_pathway <- trajectory(name="trauma_pathway") %>%
  log_(function() {paste("**Trauma arrival")}) %>% 
  
  # request triage bay
  set_attribute("start_triage_wait", function() {now(env)}) %>%
  seize(resource = "triage_bay", amount = 1) %>%
  timeout(task = rexp(1, 3.0)) %>%
  release(resource = "triage_bay", amount = 1) %>%
  
  log_(function() {paste("(T) Triage wait time:",
                   now(env) - get_attribute(env, "start_triage_wait"))}) %>%
  
  # request trauma room for stabilization
  seize(resource = "trauma_room", amount = 1) %>%
  timeout(task = rexp(1, 90.0)) %>%
  release(resource = "trauma_room", amount = 1) %>%
  
  # request treatment cubicle
  seize(resource = "trauma_treat_cubicle", amount = 1) %>%
  timeout(task = rlnorm(1, meanlog=30.0, sdlog=sqrt(4.0))) %>%
  release(resource = "trauma_treat_cubicle", amount = 1)
```

## Non-trauma patients

```{r}
nt_cubicle_treatment <- trajectory() %>% 
  log_(function() {paste("NT patient requirement treatment")}) %>% 
  seize(resource="nontrauma_treat_cubicle", amount=1) %>% 
  timeout(task = rlnorm(1, meanlog=13.3, sdlog=sqrt(2.0))) %>%
  release(resource = "nontrauma_treat_cubicle", amount = 1)
```

```{r}
non_trauma_pathway <- trajectory(name="non_trauma_pathway") %>%
  log_(function() {paste("**Non-Trauma arrival")}) %>% 
  # store start of waiting time.
  set_attribute("start_triage_wait", function() {now(env)}) %>%
  
  # queue and use triage bay
  seize(resource = "triage_bay", amount = 1) %>%
  
  log_(function() {paste("(NT) Triage wait time:",
                         now(env) - get_attribute(env, "start_triage_wait"))}) %>%
  
  timeout(task = rexp(1, 3.0)) %>%
  release(resource = "triage_bay", amount = 1) %>%
  
  # queue and use registration clerk
  set_attribute("start_reg_wait", function() {now(env)}) %>%
  seize(resource = "registration_clerk", amount = 1) %>%
  log_(function() {paste("Reg wait time:",
                         now(env) - get_attribute(env, "start_reg_wait"))}) %>%
  
  timeout(task = rlnorm(1, meanlog=5.0, sdlog=sqrt(4.0))) %>%
  release(resource = "registration_clerk", amount = 1) %>%
  
  # queue and use examination room
  set_attribute("start_exam_wait", function() {now(env)}) %>%
  seize(resource = "examination_room", amount = 1) %>%
  log_(function() {paste("Reg wait time:",
                         now(env) - get_attribute(env, "start_exam_wait"))}) %>%
  timeout(task = rnorm(1, 16.0, sqrt(4.0))) %>%
  release(resource = "examination_room", amount = 1) %>% 
  
  # a Proportion of patients require treatment in a cubicle
  branch (
    sample_nt_trauma_treatment, continue=T,
    nt_cubicle_treatment
  ) %>% 
  log_(function() {paste("NT Total time in system:",
                         now(env) - get_attribute(env, "start_triage_wait"))})
```

## Modelling patient arrivals

Patients arrive a the urgent treatment centre following a time dependent process. When patients arrive they are classified as trauma or non-trauma.

To modify the classification of patients we will use a trajectory that uses the \`branch\` function from `simmer`.

The function \`sample_arrival_type\` returns a 1 (trauma) or 2 (non-trauma). This is used to select the appropriate patient trajectory.

```{r}
patient_arrival <- trajectory() %>%
  branch(
    sample_arrival_type, continue=T,
      trauma_pathway,
      non_trauma_pathway
  ) %>%
  log_(function() {paste("A patient has departed the UTC")})
```

## Single run of the model

> Work in progress: model is still missing non-trauma logic + time dependent arrival rate via thinning.

```{r}
env <- simmer("TreatSim") %>% 
  add_resource("triage_bay", 1) %>%
  add_resource("registration_clerk", 1) %>%
  add_resource("examination_room", 3) %>%
  add_resource("trauma_room", 2) %>%
  add_resource("trauma_treat_cubicle", 1) %>%
  add_resource("nontrauma_treat_cubicle", 1) %>%
  add_generator("patient", patient_arrival, function() rexp(1, 20.0))

env %>% 
  run(until=400) %>% 
  invisible
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
