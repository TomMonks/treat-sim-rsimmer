# Sampling in R

By default R offers less control over random sampling than python and commercial simulation software. It uses a single random number stream for all sampling and does not allow you to create individual random number streams (each with its own seed) for each sampling distribution.

> This is not ideal for DES, and has a range of impacts. The one you will likely experience is additional noise between experiments due to this lack of control.
>
> The result is typically that you need to run a lot more replications to carefully assess difference between experiments. It is also harder to debug experiments.

To illustrate the impact of this design consider the example below. Imagine we are going to simulate 5 patients length of stay (LoS) in an acute hospital followed by rehabilitation. Acute LoS is exponentially distribution while rehabilitation LoS follows a uniform distribution (the choice of distribution does not matter).

> **IMPORTANT**: To make the results "repeatable" as possible we will set a random seed. With a single random stream we will see that this does not guarantee repeatable samples for patients between **experiments**.

## Imports

```{r}
library(simmer)
library(simmer.bricks)
library(magrittr)
```

## Constants

```{r}
SEED <- 42
ACUTE_MEAN <- 32.0
REHAB_MIN <- 15.0
REHAB_MAX <- 80.0
```

## Experiment 1

```{r}
n_patients <- 5

set.seed(SEED)
acute_los <- rexp(n=n_patients, rate=1.0/ACUTE_MEAN)
rehab_los <- runif(n=n_patients, min=REHAB_MIN, max=REHAB_MAX)

print(acute_los)
print(rehab_los)
```

## Experiment 2

We will now reset the random stream using the same seed and limit the number of patients simulated to 2.

When we re-run the code we might expect to get

> Acute Los:
>
> ```         
> 6.346778 21.148648
> ```
>
> Rehab Los:
>
> ```         
> 23.75333 57.70450
> ```

But we will see that this does not happen. This is because all sampling makes use of a pseudo random number stream that generates uniformly distribution numbers $U$'s between 0 and 1. When only 1 stream is used for all sampling we can end up with lots of noise between experiments simply because different $U$'s are used for the same patients.

```{r}
n_patients <- 2

set.seed(SEED)
acute_los <- rexp(n=n_patients, rate=1.0/ACUTE_MEAN)
rehab_los <- runif(n=n_patients, min=REHAB_MIN, max=REHAB_MAX)

print(acute_los)
print(rehab_los)
```

## Force the order of sampling

To force the order of sampling within a single random number stream each patient must do their sampling upfront and in process order.

Below we re-run Experiments 1 and 2, but this time we make sure the process is sampled in order (acute then rehab) for each patient.

### A Return to Experiment 1

```{r}
n_patients <- 3

set.seed(SEED)

for (patient_i in 1:n_patients) {
    print(paste("Patient ", patient_i))
    print(paste("Acute ", rexp(n=1, rate=1.0/ACUTE_MEAN)))
    print(paste("Rehab ", runif(n=1, min=REHAB_MIN, max=REHAB_MAX)))
}


```

### A Return to Experiment 2

```{r}
n_patients <- 2

set.seed(SEED)

for (patient_i in 1:n_patients) {
    print(paste("Patient ", patient_i))
    print(paste("Acute ", rexp(n=1, rate=1.0/ACUTE_MEAN)))
    print(paste("Rehab ", runif(n=1, min=REHAB_MIN, max=REHAB_MAX)))
}

```

## What happens in practice when combined with `simmer`

By default `simmer` **will be** affected by the single random stream for all sampling. This is because in a DES sampling will not occur in process order like we saw above. The numbers generated will vary depending on when events are scheduled to take place.

We will first consider this in experiments where we control the exact number of arrivals.

> To simplify display we show the time patients **exit** acute and rehab activities.

### A return to Experiment 1 (again)

```{r}

# set the seed
set.seed(SEED)

# create simmer environment
env <- simmer("Experiment_1") 

# setup simple patient trajectory
patient <- trajectory("patient_pathway") %>% 
  timeout(function() rexp(1, rate=1.0/ACUTE_MEAN)) %>% 
  log_(function() {paste("Acute Los complete ", now(env))}) %>% 
  timeout(function() runif(n=1, min=REHAB_MIN, max=REHAB_MAX)) %>% log_(function() {paste("Rehab Los complete ", now(env))})

env %>% 
  # add 5 arrivals all at the same time.
  add_generator("patient", patient, at(0, 0, 0, 0, 0))
 

env %>%run() %>% 
  invisible
  
```

### A return to Experiment 2 (again)

Here we limit the model to simulated 3 patients that all arrive as the unit opens. Although arrival times are the same we can see that the acute length of stay and rehab length of stay quickly goes out of sync i.e. we have introduced noise between experiments that is nothing to do with the variation in the number of patients. Let's take patient 0 as an example.

In experiment 1:

-   Exits acute treatment at 6.3

-   Exits rehab treatment at 64.1

In experiment 2:

-   Exits acute treatment at 6.3

-   Exits rehab treatment at 55.1

```{r}
# reset the seed
set.seed(SEED)

# create simmer environment
env <- simmer("Experiment_2") 

# setup simple patient trajectory
patient <- trajectory("patient_pathway") %>% 
  timeout(function() rexp(1, rate=1.0/ACUTE_MEAN)) %>% 
  log_(function() {paste("Acute Los complete ", now(env))}) %>% 
  timeout(function() runif(n=1, min=REHAB_MIN, max=REHAB_MAX)) %>% log_(function() {paste("Rehab Los complete ", now(env))})

env %>% 
  # now limit to 3 patients.
  add_generator("patient", patient, at(0, 0, 0))
 
env %>%run() %>% 
  invisible
```

### Experiment 3: increased arrivals

Note that this also occurs when arrivals rates are increased. In experiment 3, there are 12 initial arrivals. Due to random sampling patient 0 now exits rehab at 30.4

```{r}
# reset the seed
set.seed(SEED)

# create simmer environment
env <- simmer("Experiment_3") 

# setup simple patient trajectory
patient <- trajectory("patient_pathway") %>% 
  timeout(function() rexp(1, rate=1.0/ACUTE_MEAN)) %>% 
  log_(function() {paste("Acute Los complete ", now(env))}) %>% 
  timeout(function() runif(n=1, min=REHAB_MIN, max=REHAB_MAX)) %>% log_(function() {paste("Rehab Los complete ", now(env))})

env %>% 
  # now limit to 3 patients.
  add_generator("patient", patient, at(0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0))
 
env %>%run() %>% 
  invisible
```
